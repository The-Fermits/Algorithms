// MST using prims algo 
#include <bits/stdc++.h>
using namespace std;

int n;

// minkey value of vertex which is not in mst-set 
int minKey(vector<int> &key, vector<bool> &in_mst_set) {
  
    int min = INT_MAX, min_index;

    for (int v = 0; v < n; v++)
        if (in_mst_set[v] == false && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

// A utility function to print the
// constructed MST stored in parent[]
void printMST(vector<int> &parent, vector<vector<int>> &graph) {
    cout << "Edge \tWeight\n";
    for (int i = 1; i < n; i++)
        cout << parent[i] << " - " << i << " \t"
             << graph[i][parent[i]] << " \n";
}

// Function to construct and print MST for
// a graph represented using adjacency
// matrix representation
void primMST(vector<vector<int>> &graph) {
  
    vector<int> parent(n);
    vector<int> key(n);
    vector<bool> in_mst_set(n);

    // initialise all keys to infinite
    for (int i = 0; i < n; i++)  key[i] = INT_MAX, in_mst_set[i] = false;

    // Always include first 1st vertex in MST.
    // Make key 0 so that this vertex is picked as first
    // vertex.
    key[0] = 0;
  
    // First node is always root of MST
    parent[0] = -1;

    // The MST will have V vertices
    for (int count = 0; count < n - 1; count++) {
        
        // Pick the minimum key vertex from the
        // set of vertices not yet included in MST
        int u = minKey(key, in_mst_set);

        // Add the picked vertex to the MST Set
        in_mst_set[u] = true;

        // Update key value and parent index of
        // the adjacent vertices of the picked vertex.
        // Consider only those vertices which are not
        // yet included in MST
        for (int v = 0; v < n; v++)

            // graph[u][v] is non zero only for adjacent
            // vertices of m in_mst_set[v] is false for vertices
            // not yet included in MST Update the key only
            // if graph[u][v] is smaller than key[v]
            if (graph[u][v] && in_mst_set[v] == false && graph[u][v] < key[v])
                parent[v] = u,key[v] = graph[u][v];
    }

    // Print the constructed MST
    printMST(parent, graph);
}

// Driver's code
int main() {
      vector<vector<int>> graph = { { 0, 2, 0, 6, 0 },
                                { 2, 0, 3, 8, 5 },
                                { 0, 3, 0, 0, 7 },
                                { 6, 8, 0, 0, 9 },
                                { 0, 5, 7, 9, 0 } };

    // Print the solution
    primMST(graph);

    return 0;
}
