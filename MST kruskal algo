// prims algo and kruskal's algo for MST 

#include <bits/stdc++.h>
#define ll long long
#define int long long
#define pb push_back
#define popb pop_back
#define INT_MAX 1e9+15
#define INT_MIN -(1e9+15)



using namespace std;
using vpii = vector<pair<int, int>>;
using pii = pair<int, int>;
using vi = vector<int>;
using vvi = vector<vector<int>>;
#define ff first
#define ss second
#define endl '\n'
#define all(x) x.begin(), x.end()
#define sz(x) (int)(x).size()
const int inf = 9e18;
const int mod = 1e9 + 7;
const int NUM = 1000030;
const int NN = 10000000;
//-----------------------------------------------------------------------------------------------
/*---------------------C O D E -------------------------------------------------------------------------------
------------------------H E R E ---------------------------------------------------------------------------*/

vector<vector<pii>> g;
int n, m;
vector<pair<int, pair<int, int >>> edges ;

vector<int> par;
vector<int> sz;

int find (int x){
    if(par[x]==x) return x;
    return par[x] = find (par[x]);
}

void merge(int x, int y){
int xroot = find (x);
int yroot = find (y);
if(x==y) return ;

if(sz[xroot]>=sz[yroot]){
par[yroot] = xroot ;
sz[xroot] += sz[yroot];
}

else {
    par[xroot] = yroot ;
    sz[yroot] += xroot ;
}
}

void init (){
    g.clear();
    edges.clear();
    par.clear();
    sz.clear();

    g.resize(n+1);
    edges.resize(m);
    sz.assign(n+1,1);

    par.resize(n+1);
    for (int i=0; i<=n; i++){
     par[i]=i;
    }
     

}

void solve()
{
    cin>>n>>m;
    init();
    for (int i=0; i<m; i++){
    int a,b,c;
    cin>>a>>b>>c;
    g[a].pb({b,c});
    g[b].pb({a,c});
    edges.pb({c,{a,b}});
   }

   sort(all(edges));

   int kruskal_MST_cost=0;

   for (auto v : edges){
    int x = v.second.first;
    int y= v.second.second;
    int w = v.first;

    if(find(x)!=find(y)) {
      kruskal_MST_cost += w;
      merge(x,y);
    }
   }


  cout<< kruskal_MST_cost << endl;

    

}
/*--------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------*/
signed main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int t = 1;
    cin >> t;
    while (t--)
        solve();
        
    return 0;
}
