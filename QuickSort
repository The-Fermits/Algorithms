
// worst case is O(n2) best is O(nlogn) when partion split in 2 equal array like merge sort 
// T(n)= T(length of partition 1)+ T(length of partition 2) + O(n) 
// All partition takes O(n) 

int partition(vector<int>& arr, int low, int high) {
  
  // standard either take high as pivot or randomly choose and swap with high and loop from low to high-1
    int pivot_val = arr[high];
    int i = low ;

   
    for (int j = low; j <= high -1 ; j++) {
        if (arr[j] <= pivot_val) {
           
            swap(arr[i], arr[j]);
            i++;
            
        }
    }
    
    swap(arr[i], arr[high]);  
    return i ;
}
  
 


void QuickSort(vi &a, int l, int r){
  if(l<r){
    int pivot = partition(a,l,r);
    QuickSort(a,l,pivot-1);
    // pivot is already sorted 
    QuickSort(a,pivot+1,r);
  }
}

void solve()
{
   int n; cin>>n;
   vi a(n);
   for(int i=0;i<n;i++){
   cin>>a[i];
   }

   QuickSort(a,0,n-1);

   for (int i=0; i<n; i++){
    cout<<a[i]<<" ";
   }
    

}
